{
    "bfj-service": {
        "prefix": "bfj-service",
        "body": [
            "use crate::{PageData, PageParams};",
            "use anyhow::{anyhow, Result};",
            "use bfj_common::{dto::system::UserDto, error::CustErr};",
            "use chrono::prelude::Utc;",
            "use sea_orm::{",
            "    ActiveModelTrait, ColumnTrait, DatabaseConnection, EntityTrait, PaginatorTrait, QueryFilter,",
            "    QueryOrder, Set,",
            "};",
            "use serde::Deserialize;",
            "",
            "pub struct Query {}",
            "pub struct Mutation {}",
            "",
            "impl Query {",
            "    /**",
            "     * 获取列表",
            "     */",
            "    pub async fn get_${1}_list(db: &DatabaseConnection, page_params: PageParams)",
            "    // -> Result<PageData<>>",
            "    {",
            "        let page_num = page_params.page_num.unwrap_or(1);",
            "        let page_size = page_params.page_size.unwrap_or(20);",
            "",
            "        // // 组装查询条件",
            "        // let mut s = ::Entity::find();",
            "",
            "        // // 分页",
            "        // let total = s.clone().count(db).await?;",
            "        // let paginator = s",
            "        //     .order_by_asc(::Column::CreatedAt)",
            "        //     .paginate(db, page_size);",
            "        // let total_pages = paginator.num_pages().await?;",
            "        // let list = paginator.fetch_page(page_num - 1).await?;",
            "",
            "        // Ok(PageData {",
            "        //     record: list,",
            "        //     total: total,",
            "        //     current: page_num,",
            "        //     page_size: page_size,",
            "        //     total_pages: total_pages,",
            "        // })",
            "    }",
            "",
            "    /**",
            "     * 按id查询",
            "     */",
            "    pub async fn find_${1}_by_id(db: &DatabaseConnection, id: i32) {}",
            "}",
            "",
            "impl Mutation {",
            "    /**",
            "     * 创建",
            "     */",
            "    pub async fn create_${1}(db: &DatabaseConnection) {}",
            "",
            "    /**",
            "     * 更新",
            "     */",
            "    pub async fn update_${1}(db: &DatabaseConnection) {}",
            "",
            "    /**",
            "     * 删除",
            "     */",
            "    pub async fn delete_${1}_by_id(db: &DatabaseConnection, id: i32) {}",
            "}",
            ""
        ],
        "description": "基础service模板"
    },
    "bfj-controller": {
        "prefix": "bfj-controller",
        "body": [
            "use axum::{",
            "    extract::{Json, Path, Query as ReqQuery, State},",
            "    http::{header::SET_COOKIE, StatusCode},",
            "    response::{AppendHeaders, IntoResponse},",
            "};",
            "use axum_extra::extract::WithRejection;",
            "use bfj_common::res::Res;",
            "use bfj_core::{",
            "    // unknown::{self, Mutation, Query},",
            "    PageParams,",
            "};",
            "use serde::Deserialize;",
            "",
            "use crate::AppState;",
            "",
            "#[derive(Deserialize)]",
            "pub struct ByIdParams {",
            "    id: i32,",
            "}",
            "",
            "// 获取分页列表",
            "pub async fn query(",
            "    state: State<AppState>,",
            "    WithRejection(ReqQuery(page_params), _): WithRejection<ReqQuery<PageParams>, Res>,",
            "    WithRejection(ReqQuery(params), _): WithRejection<ReqQuery<{unknown}>, Res>,",
            ") -> impl IntoResponse {",
            "    let res = Query::get_${1}_list(&state.db, page_params, params).await;",
            "",
            "    match res {",
            "        Ok(data) => Res::success(data),",
            "        Err(e) => Res::error(e),",
            "    }",
            "}",
            "",
            "// 使用 id 获取资源",
            "pub async fn find_by_id(",
            "    state: State<AppState>,",
            "    WithRejection(ReqQuery(id_params), _): WithRejection<ReqQuery<ByIdParams>, Res>,",
            ") -> impl IntoResponse {",
            "    let res = Query::find_${1}_by_id(&state.db, id_params.id).await;",
            "",
            "    match res {",
            "        Ok(data) => Res::success(data),",
            "        Err(e) => Res::error(e),",
            "    }",
            "}",
            "",
            "// 创建资源",
            "pub async fn create(",
            "    state: State<AppState>,",
            "    WithRejection(Json(params), _): WithRejection<Json<{unknown}>, Res>,",
            ") -> impl IntoResponse {",
            "    let res = Mutation::create_${1}(&state.db, params).await;",
            "",
            "    match res {",
            "        Ok(data) => Res::success(data),",
            "        Err(e) => Res::error(e),",
            "    }",
            "}",
            "",
            "// 更新资源",
            "pub async fn update(",
            "    state: State<AppState>,",
            "    WithRejection(Json(params), _): WithRejection<Json<{unknown}>, Res>,",
            ") -> impl IntoResponse {",
            "    let res = Mutation::update_${1}(&state.db, params).await;",
            "",
            "    match res {",
            "        Ok(data) => Res::success(data),",
            "        Err(e) => Res::error(e),",
            "    }",
            "}",
            "",
            "// 使用 id 删除资源",
            "pub async fn delete_by_id(",
            "    state: State<AppState>,",
            "    WithRejection(Json(id_params), _): WithRejection<Json<ByIdParams>, Res>,",
            ") -> impl IntoResponse {",
            "    let res = Mutation::delete_${1}_by_id(&state.db, id_params.id).await;",
            "",
            "    match res {",
            "        Ok(data) => Res::success(data),",
            "        Err(e) => Res::error(e),",
            "    }",
            "}",
            ""
        ],
        "description": "基础controller模板"
    },
}